///// Polymorphism /////
The word “polymorphism” means having many forms. In simple words, we can define polymorphism as the ability 
of a message to be displayed in more than one form. A real-life example of polymorphism is a person who at 
the same time can have different characteristics.
Polymorphism is considered one of the important features of Object-Oriented Programming.

Types of Polymorphism
    ->Compile-time Polymorphism
    ->Runtime Polymorphism

1. Compile-Time Polymorphism
This type of polymorphism is achieved by function overloading or operator overloading.

A. Function Overloading
    When there are multiple functions with the same name but different parameters, then the functions are said 
    to be overloaded, hence this is known as Function Overloading. Functions can be overloaded by changing the 
    number of arguments or/and changing the type of arguments. In simple terms, it is a feature of object-oriented 
    programming providing many functions that have the same name but distinct parameters when numerous tasks are 
    listed under one function name. There are certain Rules of Function Overloading that should be followed 
    while overloading a function.
B. Operator Overloading
    C++ has the ability to provide the operators with a special meaning for a data type, this ability is known as
    operator overloading. For example, we can make use of the addition operator (+) for string class to concatenate 
    two strings. We know that the task of this operator is to add two operands. So a single operator ‘+’, when placed 
    between integer operands, adds them and when placed between string operands, concatenates them. 


2. Runtime Polymorphism
    This type of polymorphism is achieved by Function Overriding. Late binding and dynamic polymorphism are other names 
    for runtime polymorphism. The function call is resolved at runtime in runtime polymorphism. In contrast, with compile 
    time polymorphism, the compiler determines which function call to bind to the object after deducing it at runtime

    A. Function Overriding
        Function Overriding occurs when a derived class has a definition for one of the member functions of the base class. 
        That base function is said to be overridden.
    
    B. Virtual Function
        A virtual function is a member function that is declared in the base class using the keyword virtual and is re-defined 
        (Overridden) in the derived class.

        Some Key Points About Virtual Functions:
        ->  Virtual functions are Dynamic in nature. 
        ->  They are defined by inserting the keyword “virtual” inside a base class and are always declared with a base 
            class and overridden in a child class
        ->  A virtual function is called during Runtime