/////Destructors/////
Destructor is an instance member function that is invoked automatically 
whenever an object is going to be destroyed. Meaning, a destructor is the 
last function that is going to be called before an object is destroyed.

->A destructor is also a special member function like a constructor. 
->Destructor destroys the class objects created by the constructor. 
->Destructor has the same name as their class name preceded by a tilde (~) symbol.
->It is not possible to define more than one destructor. 
->The destructor is only one way to destroy the object created by the constructor. 
  Hence destructor can-not be overloaded.
->Destructor neither requires any argument nor returns any value.
->It is automatically called when an object goes out of scope. 
->Destructor release memory space occupied by the objects created by the constructor.
->In destructor, objects are destroyed in the reverse of an object creation.

A destructor function is called automatically when the object goes out of scope:

1.the function ends 
2.the program ends 
3.a block containing local variables ends 
4.a delete operator is called  
Example

class yo{
    string name;
    yo(){
        name = "Ansh";
    }
    ~yo(){
        print "Destructor called"
    }

};

When do we need to write a user-defined destructor?
If we do not write our own destructor in class, the compiler creates a 
default destructor for us. The default destructor works fine unless we have 
dynamically allocated memory or pointer in class. When a class contains a 
pointer to memory allocated in the class, we should write a destructor to 
release memory before the class instance is destroyed. This must be done to 
avoid memory leaks.

Can a destructor be virtual? YES

Virtual Destructor
 
Deleting a derived class object using a pointer of base class type that has a non-virtual 
destructor results in undefined behavior. To correct this situation, the base class should 
be defined with a virtual destructor. 
For example, the following program results in undefined behavior. 

Private Destructor in C++
Destructors with the access modifier as private are known as Private Destructors. 
Whenever we want to prevent the destruction of an object, we can make the destructor private.

Whenever we want to control the destruction of objects of a class, we make the destructor private. 
For dynamically created objects, it may happen that you pass a pointer to the object to a function 
and the function deletes the object. If the object is referred after the function call, the reference 
will become dangling.