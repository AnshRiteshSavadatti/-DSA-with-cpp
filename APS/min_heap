class MinHeap:
    def __init__(self):
        self.heap = []

    def _parent(self, i): return (i - 1) // 2
    def _left(self, i): return 2 * i + 1
    def _right(self, i): return 2 * i + 2

    def insert(self, key):
        self.heap.append(key)
        self._sift_up(len(self.heap) - 1)

    def _sift_up(self, i):
        while i > 0 and self.heap[self._parent(i)] > self.heap[i]:
            self.heap[i], self.heap[self._parent(i)] = self.heap[self._parent(i)], self.heap[i]
            i = self._parent(i)

    def extract_min(self):
        if not self.heap:
            return None
        if len(self.heap) == 1:
            return self.heap.pop()
        
        root = self.heap[0]
        self.heap[0] = self.heap.pop()
        self._heapify(0)
        return root

    def _heapify(self, i):
        smallest = i
        l = self._left(i)
        r = self._right(i)

        if l < len(self.heap) and self.heap[l] < self.heap[smallest]:
            smallest = l
        if r < len(self.heap) and self.heap[r] < self.heap[smallest]:
            smallest = r

        if smallest != i:
            self.heap[i], self.heap[smallest] = self.heap[smallest], self.heap[i]
            self._heapify(smallest)

    def get_min(self):
        return self.heap[0] if self.heap else None

    def print_heap(self):
        print("Heap:", self.heap)

if __name__ == '__main__':
    h = MinHeap()
    h.insert(10)
    h.insert(4)
    h.insert(15)
    h.insert(1)
    h.insert(7)

    h.print_heap()               # Heap: [1, 4, 15, 10, 7]
    print("Min:", h.get_min())   # Min: 1
    print("Extracted:", h.extract_min())  # 1
    h.print_heap()               # Heap after extraction
