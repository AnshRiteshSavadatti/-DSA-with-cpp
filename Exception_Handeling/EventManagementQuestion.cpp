/*
    Consider an Event management system, the event is defined by
    Event(eventid, title, eventType, location, eventCharge,
    status(completed/ongoing/booked) ). 
    The event types are IndoorEvent
    (GST is applicable as separate service charges) and OutDoorEvent (The
    outdoor event may be executive or non-executive, the charges are applied
    based on these two parameters and GST is applicable as separate service
    charges) and there is event manager. The OutDoorEvents are charged per
    hour and IndoorEvents are charged per day. The booked events can be
    cancelled and the ongoing events and completed events cannot be
    cancelled. 
    Every event created shall be assigned a manager and a
    manager may not be allocated any event. Create few indoor and outdoor
    events.
     Apply run time polymorphism to compute the charges for
    conducting events and print event details and cancelled events. The
    application is also print total revenue generated by organizing events.

    Identify run time errors and manage using exception handling mechanism of C++.
*/


#include <iostream>
#include <vector>
#include <stdexcept>

class Event {
public:
    int eventID;
    std::string title;
    std::string eventType;
    std::string location;
    double eventCharge;
    std::string status;

public:
    Event(int id, const std::string& t, const std::string& et, const std::string& loc, double charge)
        : eventID(id), title(t), eventType(et), location(loc), eventCharge(charge), status("booked") {}

    virtual ~Event() {}

    virtual double calculateCharge() const = 0;

    void printDetails() const {
        std::cout << "Event ID: " << eventID << "\nTitle: " << title << "\nType: " << eventType
                  << "\nLocation: " << location << "\nCharge: " << eventCharge << "\nStatus: " << status << std::endl;
    }

    void cancelEvent() {
        if (status == "ongoing" || status == "completed") {
            throw std::logic_error("Cannot cancel an ongoing or completed event.");
        }
        status = "cancelled";
    }

    double getEventCharge() const {
        return eventCharge;
    }

    std::string getStatus() const {
        return status;
    }

    void updateStatus(){
        this->status = "completed";
        return;
    }
};

class IndoorEvent : public Event {
public:
    IndoorEvent(int id, const std::string& t, const std::string& loc, double charge)
        : Event(id, t, "Indoor", loc, charge) {}

    double calculateCharge() const override {
        return eventCharge;
    }
};

class OutdoorEvent : public Event {
    bool isExecutive;
    int hours;

public:
    OutdoorEvent(int id, const std::string& t, const std::string& loc, double charge, bool exec, int hrs)
        : Event(id, t, "Outdoor", loc, charge), isExecutive(exec), hours(hrs) {}

    double calculateCharge() const override {
        double charge = eventCharge * hours;
        if (isExecutive) {
            charge *= 1.5;  // Executive events have a 50% surcharge
        }
        return charge;
    }
};

class EventManager {
    std::vector<Event*> events;
    double totalRevenue;

public:
    EventManager() : totalRevenue(0) {}

    ~EventManager() {
        for (Event* event : events) {
            delete event;
        }
    }

    void addEvent(Event* event) {
        events.push_back(event);
        totalRevenue += event->calculateCharge();
    }

    void printAllEvents() const {
        for (const Event* event : events) {
            event->printDetails();
        }
    }

    void cancelEvent(int eventID) {
        for (Event* event : events) {
            if (event->getStatus() == "booked" && event->eventID == eventID) {
                event->cancelEvent();
                totalRevenue -= event->getEventCharge(); // Refund charge for cancelled event
                std::cout << "Event ID " << eventID << " has been cancelled." << std::endl;
                return;
            }
        }
        throw std::invalid_argument("Event ID not found or event cannot be cancelled.");
    }

    double getTotalRevenue() const {
        return totalRevenue;
    }
};

int main() {
    EventManager manager;

    IndoorEvent indoor1(1, "Team Building Workshop", "Meeting Room A", 1000.0);
    OutdoorEvent outdoor1(2, "Company Picnic", "Park", 500.0, true, 4); // Executive outdoor event for 4 hours
    OutdoorEvent outdoor2(3, "Charity Run", "Stadium", 200.0, false, 6); // Non-executive outdoor event for 6 hours

    manager.addEvent(&indoor1);
    manager.addEvent(&outdoor1);
    manager.addEvent(&outdoor2);
    outdoor1.updateStatus();

    try {
        manager.cancelEvent(2); // Cancelling outdoor1 event
        manager.cancelEvent(1); // This will throw an exception as no event with ID 4 exists
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    // manager.printAllEvents();
    // std::cout << "Total Revenue: " << manager.getTotalRevenue() << std::endl;

    return 0;
}